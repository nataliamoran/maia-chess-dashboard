name: Test build

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual test'

jobs:
  deploy_backend:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    env:
      PORT: 25277
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Tests
        run: |
          cd backend
          python -m unittest discover tests
      - name: Sets env vars to dev
        run: |
          echo "HOST=dash-dev.maiachess.com" >> $GITHUB_ENV
          echo "TARGET_DIRECTORY=/opt/maia-dashboard-dev" >> $GITHUB_ENV
          echo "UVICORN_CONFIG_FROM=config/uvicorn-dev.service" >> $GITHUB_ENV
          echo "UVICORN_CONFIG_TO=/etc/systemd/system/uvicorn-dev.service" >> $GITHUB_ENV
          echo "UVICORN=uvicorn-dev" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/heads/develop')
      - name: Sets env vars to prod
        run: |
          echo "HOST=dashboard.maiachess.com" >> $GITHUB_ENV
          echo "TARGET_DIRECTORY=/opt/maia-dashboard-prod" >> $GITHUB_ENV
          echo "UVICORN_CONFIG_FROM=config/uvicorn-prod.service" >> $GITHUB_ENV
          echo "UVICORN_CONFIG_TO=/etc/systemd/system/uvicorn-prod.service" >> $GITHUB_ENV
          echo "UVICORN=uvicorn-prod" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/heads/main')
      - name: Copy backend folder to server
        uses: appleboy/scp-action@master
        with:
          host: ${{env.HOST}}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ env.PORT }}
          source: "backend,config,requirements.txt"
          target: ${{ env.TARGET_DIRECTORY }}
          overwrite: true
      - name: Reinstalling virtualenv, requirements
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.HOST}}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ env.PORT }}
          script: |
            cd ${{ env.TARGET_DIRECTORY }}
            virtualenv -p `which python3.8` env
            source env/bin/activate
            pip install -r requirements.txt
            sudo cp ${{ env.UVICORN_CONFIG_FROM }} ${{ env.UVICORN_CONFIG_TO }}
            sudo systemctl daemon-reload
            sudo systemctl restart ${{ env.UVICORN }}
            sudo cp config/dev.nginx.conf /etc/nginx/sites-available/dev.nginx.conf
            sudo service nginx restart

  build_fe_and_deploy:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    env:
      PORT: 25277
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v2
      - name: Sets env vars to dev
        run: |
          echo "HOST=dash-dev.maiachess.com" >> $GITHUB_ENV
          echo "TARGET_DIRECTORY=/opt/maia-dashboard-dev" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/heads/develop')
      - name: Sets env vars to prod
        run: |
          echo "HOST=dashboard.maiachess.com" >> $GITHUB_ENV
          echo "TARGET_DIRECTORY=/opt/maia-dashboard-prod" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/heads/main')
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          cd frontend
          npm install
      - name: Build
        run: |
          cd frontend
          npm run build --if-present
          cd ..
      - name: Copy frontend build to server
        uses: appleboy/scp-action@master
        with:
          host: ${{env.HOST}}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ env.PORT }}
          source: "frontend/build/*"
          target: "${{ env.TARGET_DIRECTORY }}/fe"
          overwrite: true
          strip_components: 2
  slackNotification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [deploy_backend, build_fe_and_deploy]
    steps:
      - name: Slack Notification PROD
        uses: rtCamp/action-slack-notify@v2
        if: github.ref == 'refs/heads/main' &&  success()
        env:
          SLACK_USERNAME: "Github Actions"
          SLACK_ICON_EMOJI: ":heart_eyes_cat:"
          SLACK_TITLE: "This is a GitHub Actions PROD build!"
          SLACK_MESSAGE: 'PROD deployment successful :rocket:'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      - name: Slack Notification DEV
        uses: rtCamp/action-slack-notify@v2
        if: github.ref == 'refs/heads/develop' &&  success()
        env:
          SLACK_USERNAME: "Github Actions"
          SLACK_ICON_EMOJI: ":heart_eyes_cat:"
          SLACK_TITLE: "This is a GitHub Actions DEV build!"
          SLACK_MESSAGE: 'DEV deployment successful :rocket:'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      - name: Slack Notification Failure PROD
        uses: rtCamp/action-slack-notify@v2
        if: github.ref == 'refs/heads/main' &&  !success()
        env:
          SLACK_USERNAME: "Github Actions"
          SLACK_ICON_EMOJI: ":crying_cat_face:"
          SLACK_TITLE: "This is a GitHub Actions PROD build!"
          SLACK_MESSAGE: 'PROD deployment failed :skull:'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      - name: Slack Notification Failure DEV
        uses: rtCamp/action-slack-notify@v2
        if: github.ref == 'refs/heads/develop' &&  !success()
        env:
          SLACK_USERNAME: "Github Actions"
          SLACK_ICON_EMOJI: ":crying_cat_face:"
          SLACK_TITLE: "This is a GitHub Actions DEV build!"
          SLACK_MESSAGE: 'DEV deployment failed :skull:'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}